#!/usr/bin/perl

use strict;
use warnings;
use File::chdir;
use Time::HiRes qw(gettimeofday tv_interval);

my $sets_dir;
my $simulation = "no";
$, = "\n";

SETS: {
	$sets_dir = "$ENV{'HOME'}/OpenBSD";
	printf "Set [/path/to/sets/dir] or [s]imulation, default [$sets_dir] ";
	my $line = <STDIN>;
	chomp($line);
	if ($line eq "s") {
		$simulation = "yes";
		last SETS;
	} elsif ($line) {
		$sets_dir = $line;
	} 
	if (! -d $sets_dir) {
		mkdir $sets_dir or print "$!\n";
	}
	(! -d $sets_dir ) ? redo SETS : last SETS;
}

$CWD = $sets_dir;

my $hw;

my @platforms = ( "alpha",
		  "amd64",
		  "armish",
		  "hp300",
		  "hppa",
		  "i386",
		  "landisk",
		  "loongson",
		  "macppc",
		  "mvme68k",
		  "mvme88k",
		  "sgi",
		  "socppc",
		  "sparc",
		  "sparc64",
		  "vax",
		  "zaurus" );

HW: {
	$hw = `uname -m`;
	chomp($hw);
	printf "Choose hardware platform\n";
	printf "[L] to list hardware platform available, default to [$hw] ";
	my $line = <STDIN>;
	chomp($line);
	if ($line eq 'L') {
		print "Avaible Platforms:\n";
		for (@platforms) {
			print "    $_\n";
		}
		redo HW;
	} elsif ($line) {
		if (grep($line, @platforms) == 1) {
			$hw = $line;
			last HW;
		} else {
			printf "bad hardware platform name\n";
			redo HW;
		}
	}
}

my $SHA256_location = "http://ftp.OpenBSD.org/pub/OpenBSD/snapshots/$hw/SHA256";

print "\nDownloading $SHA256_location...\n";

my $SHA256 = `curl -s $SHA256_location`;

print "Done\n";

print "\nGetting release number: ";

my $r; #r is for release

if ( $SHA256 =~ /base([0-9]{2,2}).tgz/ ) {
	$r = $1;
	print "$r\n";
} else {
	print "\nNo good SHA256 from http://ftp.OpenBSD.org. Aborting.\n";
	exit(1);
}


my @sets = ( { "INSTALL.$hw" => "checked" }, #name => status
	     { "bsd" => "checked"  },
	     { "bsd.mp" => "checked" },
	     { "bsd.rd" => "checked" },
	     { "base$r.tgz" => "checked" },
	     { "comp$r.tgz" => "checked" },
	     { "etc$r.tgz" => "checked" },
	     { "game$r.tgz" => "checked" },
	     { "man$r.tgz" => "checked" },
	     { "misc$r.tgz" => "checked" },
	     { "xbase$r.tgz" => "checked" },
	     { "xetc$r.tgz" => "checked" },
	     { "xfont$r.tgz" => "checked" },
	     { "xserv$r.tgz" => "checked" },
	     { "xshare$r.tgz" => "checked"}, );

SETS: {
	print "\nSets avaiable:\n";
	for (@sets) {
	    for my $key (keys %{$_}) {
		my $box = ($_->{$key} eq "checked") ?
		    "[x]" :
		    "[ ]";
		print "$box $key\n";
	    }
	}
	printf "Choose sets or [Done] ";
	my $line = <STDIN>;
	chomp($line);
	if ($line eq "Done" or $line eq "") {
		last SETS;
	} else {
		for my $set_ref (@sets) {
			for my $set (keys %{$set_ref}) {
				if ($set =~ /$line/
				    && $set_ref->{$set} eq "checked") {
					$set_ref->{$set} = "not checked";
				} elsif ($set =~ /$line/
					 && $set_ref->{$set} eq "not checked") {
					$set_ref->{$set} = "checked";
				}
			}
		}
		redo SETS;
	}
}

my @ftp_html = split /\n/, `curl -s http://www.openbsd.org/ftp.html`; 

my @servers;

my @synced_server;

for (@ftp_html) {
	if (/^\s+((http:)\/\/.+)</ && (! /ftp\.OpenBSD\.org/)) {
		push @servers, $1;
	}
}

my $server;
my $best_time;
my %synced_mirror; # { 'http://mirror.com' => $time }

for my $candidat_server (@servers) {
	my $url = "${candidat_server}snapshots/$hw/SHA256";
	$candidat_server =~ s!pub/OpenBSD/!!;
	my $time_before_dl = [gettimeofday];
	my $mirrored_SHA256 = `curl -s -m 1 $url 2>/dev/null`;
	my $time = tv_interval $time_before_dl;
	if ($SHA256 eq $mirrored_SHA256) {
		if ((! $best_time) or $time < $best_time) {
			$best_time = $time;
			$synced_mirror{$candidat_server} = $time ;
			$server = $candidat_server;
		} else {
			$synced_mirror{$candidat_server} = $time;
		}
	}
}


print "$server seemed to be the fastest, let's get the sets!\n";

my @striped_SHA256 ;

for my $set_ref (@sets) {
	for my $set (keys %{$set_ref}) {
		if ($set_ref->{$set} eq "checked") {
			print "curl -s -o $set $server/pub/OpenBSD/snapshots/$hw/$set\n";
			if ($simulation eq "no") {
				`curl -s -o $set $server/pub/OpenBSD/snapshots/$hw/$set`;
				if ($SHA256 =~ /(SHA256 \($set\) = [a-f0-9]+\n)/s) {
					push @striped_SHA256, $1;
				}
			}
		}
	}
}
if ($simulation eq "no") {
	open my $fh_SHA256, '>', 'SHA256';
	print $fh_SHA256 @striped_SHA256;
	
	print "Checksum:\n" . `cksum -a sha256 -c SHA256` ;
}
