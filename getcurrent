#!/usr/bin/perl

use strict;
use warnings;
use File::chdir;
use Time::HiRes qw(gettimeofday tv_interval);

my $sets_dir = $ENV{'HOME'}."/OpenBSD";
my $simulation ;

print "Choose \"/path/to/sets/dir\" or \"simulation\"\n";
printf "[$sets_dir] ";
while (<STDIN>) {
	chomp;
	if ( $_ ) {
		$sets_dir = $_;
	} elsif ( $_ eq "simulation" ) {
		$simulation = "true";
		last;
	} 
	if ( ! -d $sets_dir) {
		mkdir $sets_dir or print "$!\n";
	}
	( ! -d $sets_dir ) ? next : last ;
} continue {
	$sets_dir = $ENV{'HOME'}."/OpenBSD";
	printf "Download sets to [$sets_dir]" ;
}

$CWD = $sets_dir;

my $hw = `uname -m`;
chomp($hw);

my $SHA256 = `ftp -o - http://ftp.openbsd.org/pub/OpenBSD/snapshots/$hw/SHA256`;

my $r; #r is for release

if ( $SHA256 =~ /base([0-9]{2,2}).tgz/ ) {
	$r = $1;
} else {
	print "No good SHA256 from http://ftp.OpenBSD.org. Aborting.\n";
	exit(1);
}

my @platforms = ( "alpha",
		  "amd64",
		  "armish",
		  "hp300",
		  "hppa",
		  "i386",
		  "landisk",
		  "loongson",
		  "macppc",
		  "mvme68k",
		  "mvme88k",
		  "sgi",
		  "socppc",
		  "sparc",
		  "sparc64",
		  "vax",
		  "zaurus" );

my @sets = ( "INSTALL.$hw",
	     "bsd",
	     "bsd.mp",
	     "bsd.rd",
	     "base$r.tgz",
	     "comp$r.tgz",
	     "etc$r.tgz",
	     "game$r.tgz",
	     "man$r.tgz",
	     "misc$r.tgz",
	     "xbase$r.tgz",
	     "xetc$r.tgz",
	     "xfont$r.tgz",
	     "xserv$r.tgz",
	     "xshare$r.tgz" );

my @ftp_html = split /\n/, `ftp -o - http://www.openbsd.org/ftp.html`; 

my @servers;

my @synced_server;

for (@ftp_html) {
	if (/^\s+((http:)\/\/.+)</ && (! /ftp\.OpenBSD\.org/)) {
		push @servers, $1;
	}
}

my $server;
my $best_time;


for my $candidat_server (@servers) {
	my $url = "${candidat_server}snapshots/$hw/SHA256";
	$candidat_server =~ s!pub/OpenBSD/!!;
	my $time_before_dl = [gettimeofday];
	my $mirrored_SHA256 = `curl -s -m 1 $url 2>/dev/null`;
	my $time = tv_interval $time_before_dl;
	printf "%2.2f: ", $time;
	if ($SHA256 eq $mirrored_SHA256) {
		if (! $best_time) {
			$best_time = $time;
			printf "%20s, synced \n", $candidat_server ;
			$server = $candidat_server;
		} elsif ( $time < $best_time ) {
			printf "%20s, synced, seems faster\n", $candidat_server;
			$best_time = $time;
			$server = $candidat_server;
		} else {
			printf "%20s, synced, doesn't seem faster\n", $candidat_server;
		}
	} else {
		printf "%20s, not synced\n", $candidat_server;
	}
}


print "$server seemed to be the fastest, let's get the sets!\n";

my @striped_SHA256 ;

for(@sets) {
	print "curl -s -o $_ $server/pub/OpenBSD/snapshots/$hw/$_\n";
	if ($simulation eq "true") {
		`curl -s -o $_ $server/pub/OpenBSD/snapshots/$hw/$_`;
		if ($SHA256 =~ /(SHA256 \($_\) = [a-f0-9]+\n)/s) {
			push @striped_SHA256, $1;
		}
	}
}

open my $fh_SHA256, '>', 'SHA256';
print $fh_SHA256 @striped_SHA256;

print "Checksum:\n" . `cksum -a sha256 -c SHA256` ;
